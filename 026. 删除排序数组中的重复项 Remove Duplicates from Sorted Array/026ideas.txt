<<<<<<< HEAD
026.ideas
 → 方法1，双指针法完成 O(N)/O(1) → JS
存储两个指针i,j，从0开始，若nums[i]=nums[j]，则j++(j作快指针)，而nums[i]!=nums[j]时i进一位(保留相同数字中的第一个)，随后将nums[j]覆盖nums[i]
要点：
为什么返回数值是整数，但输出的答案是数组呢?
请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
你可以想象内部操作如下:
// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
int len = removeDuplicates(nums);
// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
for (int i = 0; i < len; i++) {
    print(nums[i]);
}
也就是说，在JS中，removeDuplicates = function(nums)这里的nums是引用传递，内部的修改会反映到nums上；
思考：
1.该算法可以在一个排列完毕的数列/数据表中用O(N)的速度除去重复项
=======
026.ideas
 → 方法1，双指针法完成 O(N)/O(1) → JS
存储两个指针i,j，从0开始，若nums[i]=nums[j]，则j++(j作快指针)，而nums[i]!=nums[j]时i进一位(保留相同数字中的第一个)，随后将nums[j]覆盖nums[i]
要点：
为什么返回数值是整数，但输出的答案是数组呢?
请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
你可以想象内部操作如下:
// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
int len = removeDuplicates(nums);
// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
for (int i = 0; i < len; i++) {
    print(nums[i]);
}
也就是说，在JS中，removeDuplicates = function(nums)这里的nums是引用传递，内部的修改会反映到nums上；
思考：
1.该算法可以在一个排列完毕的数列/数据表中用O(N)的速度除去重复项
>>>>>>> 89f709a1ed67f322bd9b0ae462cfe34ffaebd882
2.C#中引用传递不是需要ref关键字吗？……